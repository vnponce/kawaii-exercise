{"version":3,"sources":["Hero.jsx","App.js","serviceWorker.js","index.js"],"names":["HeroStyled","styled","div","Hero","ref","useRef","dayValue","color","mood","size","nightValue","useState","ghost","setGhost","className","href","onChange","current","checked","document","body","classList","remove","add","type","id","htmlFor","Ghost","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qYAKA,IAAMA,EAAaC,IAAOC,IAAV,KA2DDC,MAtDf,WACE,IAAMC,EAAMC,iBAAO,MAEbC,EAAW,CACfC,MAAO,QACPC,KAAM,KACNC,KAAM,KAGFC,EAAa,CACjBH,MAAO,OACPC,KAAM,WACNC,KAAM,KAZM,EAeYE,mBAASL,GAfrB,mBAePM,EAfO,KAeAC,EAfA,KA+Bf,OACE,kBAACb,EAAD,CAAYc,UAAU,cACpB,gCACE,6BACE,uBAAGC,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,SACA,uBAAGA,KAAK,KAAR,YAEF,2BAAOX,IAAKA,EAAKY,SArBtB,WACKZ,EAAIa,QAAQC,SACbC,SAASC,KAAKC,UAAUC,OAAO,iBAC/BH,SAASC,KAAKC,UAAUE,IAAI,gBAE5BV,EAASH,KAETS,SAASC,KAAKC,UAAUC,OAAO,gBAC/BH,SAASC,KAAKC,UAAUE,IAAI,iBAE5BV,EAASP,KAWiCkB,KAAK,WAAWC,GAAG,aAC5D,2BAAOX,UAAU,SAASY,QAAQ,YAAlC,cAIF,0BAAMZ,UAAU,aACd,yBAAKW,GAAG,SACN,kBAACE,EAAA,EAAD,eAAOlB,KAAM,IAAKD,KAAK,YAAeI,KAExC,yBAAKa,GAAG,cC7CAG,MARf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,QCIce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjB,SAASkB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b55885e.chunk.js","sourcesContent":["import React, {useRef, useState} from 'react';\nimport styled from 'styled-components';\nimport { Ghost } from 'react-kawaii';\n\n\nconst HeroStyled = styled.div`\n    width: 100%;\n    height: 100vh;\n`;\n\nfunction Hero() {\n  const ref = useRef(null);\n  // Valores iniciales cuando es de día y esta 'muerto' x_x\n  const dayValue = {\n    color: 'white',\n    mood: 'ko',\n    size: 200,\n  };\n  // Valores cuando es de noche y el fantasma aparece feliz :D\n  const nightValue = {\n    color: 'gray',\n    mood: 'blissful',\n    size: 400\n  }\n\n  const [ghost, setGhost] = useState(dayValue);\n\n  // usado para cambiar el dark-mode\n  function handleChange() {\n    if(ref.current.checked) {\n      document.body.classList.remove('is-light-mode');\n      document.body.classList.add('is-dark-mode');\n      // Es de noche y debe verse el fantasma\n      setGhost(nightValue)\n    } else {\n      document.body.classList.remove('is-dark-mode');\n      document.body.classList.add('is-light-mode');\n      // Es de día y debe ocultarse el fantasma\n      setGhost(dayValue)\n    }\n  }\n return (\n   <HeroStyled className=\"hero-image\">\n     <header>\n       <nav>\n         <a href=\"#\">Home</a>\n         <a href=\"#\">About</a>\n         <a href=\"#\">Contact</a>\n       </nav>\n       <input ref={ref} onChange={handleChange} type=\"checkbox\" id=\"checkbox\"/>\n       <label className=\"switch\" htmlFor=\"checkbox\">\n         Dark mode\n       </label>\n     </header>\n     <main className=\"hero-text\">\n       <div id=\"ghost\">\n         <Ghost size={200} mood=\"blissful\" {...ghost} />\n       </div>\n       <div id=\"shadow\"></div>\n     </main>\n   </HeroStyled>\n );\n}\n\nexport default Hero;","import React from 'react';\nimport './App.css';\nimport Hero from \"./Hero\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hero />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}